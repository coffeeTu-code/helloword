// Code generated by protoc-gen-go.
// source: sum_rpc.proto
// DO NOT EDIT!

package grpc_template

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RpcTemplateService service

type RpcTemplateServiceClient interface {
	Sum(ctx context.Context, in *RpcTemplateRequest, opts ...grpc.CallOption) (*RpcTemplateResponse, error)
}

type rpcTemplateServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcTemplateServiceClient(cc *grpc.ClientConn) RpcTemplateServiceClient {
	return &rpcTemplateServiceClient{cc}
}

func (c *rpcTemplateServiceClient) Sum(ctx context.Context, in *RpcTemplateRequest, opts ...grpc.CallOption) (*RpcTemplateResponse, error) {
	out := new(RpcTemplateResponse)
	err := grpc.Invoke(ctx, "/grpc_template.RpcTemplateService/Sum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcTemplateService service

type RpcTemplateServiceServer interface {
	Sum(context.Context, *RpcTemplateRequest) (*RpcTemplateResponse, error)
}

func RegisterRpcTemplateServiceServer(s *grpc.Server, srv RpcTemplateServiceServer) {
	s.RegisterService(&_RpcTemplateService_serviceDesc, srv)
}

func _RpcTemplateService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcTemplateServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_template.RpcTemplateService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcTemplateServiceServer).Sum(ctx, req.(*RpcTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcTemplateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_template.RpcTemplateService",
	HandlerType: (*RpcTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _RpcTemplateService_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("sum_rpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0xcd, 0x8d,
	0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4d, 0x07, 0xb2, 0xe3, 0x4b,
	0x52, 0x73, 0x0b, 0x72, 0x12, 0x4b, 0x52, 0xa5, 0x38, 0x81, 0xb2, 0x10, 0x19, 0xa3, 0x24, 0x2e,
	0xa1, 0xa0, 0x82, 0xe4, 0x10, 0xa8, 0x4c, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x0f,
	0x17, 0x73, 0x70, 0x69, 0xae, 0x90, 0xa2, 0x1e, 0x8a, 0x3e, 0x3d, 0x24, 0x95, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x4a, 0xf8, 0x94, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x26, 0xb1,
	0x81, 0xad, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x16, 0x1f, 0x1f, 0xae, 0x95, 0x00, 0x00,
	0x00,
}
